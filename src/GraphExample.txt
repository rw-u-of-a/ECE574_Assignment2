#include <iostream>
#include <map>
#include "vmodule.h"

using namespace std;



int GraphExample(){
    vmodule G;
    map<string, map<int, double>> latencies;
    latencies = make_latencies();


    // input Int8 a, b, c
    G.add_wire("a", true, 8);           // name = "a", is_signed = true, datawidth = 8
    G.wires["a"]->is_completed = true;  // all inputs are marked as completed
    G.add_wire("b", true, 8);           // name = "b", is_signed = true, datawidth = 8
    G.wires["b"]->is_completed = true;  // all inputs are marked as completed
    G.add_wire("c", true, 8);           // name = "c", is_signed = true, datawidth = 8
    G.wires["c"]->is_completed = true;  // all inputs are marked as completed

    // output Int8 z
    G.add_wire("z", true, 8);           // name = "z", is_signed = true, datawidth = 8

    // output Int16 x
    G.add_wire("x", true, 16);

    // wire Int8 d, e
    G.add_wire("d", true, 8);
    G.add_wire("e", true, 8);

    // wire Int16 f, g
    G.add_wire("f", true, 16);
    G.add_wire("g", true, 16);

    // wire Int16 zwire, xwire
    G.add_wire("zwire", true, 16);
    G.add_wire("xwire", true, 16);

    // d = a + b
    G.add_component("ADD_1", latencies["ADD"][8]);
    G.wire_to_component("a", "ADD_1");
    G.wire_to_component("b", "ADD_1");
    G.wire_from_component("d", "ADD_1");

    // e = a + c
    G.add_component("ADD_2", latencies["ADD"][8]);
    G.wire_to_component("a", "ADD_2");
    G.wire_to_component("c", "ADD_2");
    G.wire_from_component("e", "ADD_2");

    // g = d > e
    G.add_component("COMP_1", latencies["COMP"][8]);
    G.wire_to_component("d", "COMP_1");
    G.wire_to_component("e", "COMP_1");
    G.wire_from_component("g", "COMP_1");

    // zwire = g ? d : e
    G.add_component("MUX2x1_1", latencies["MUX2x1"][8]);
    G.wire_to_component("g", "MUX2x1_1");
    G.wire_to_component("d", "MUX2x1_1");
    G.wire_to_component("e", "MUX2x1_1");
    G.wire_from_component("zwire", "MUX2x1_1");

    // z = zwire
    G.add_component("REG_1", latencies["REG"][8]);
    G.wire_to_component("zwire", "REG_1");
    G.wire_from_component("z", "REG_1");
    G.make_register("REG_1");

    // f = a * c
    G.add_component("MUL_1", latencies["MUL"][8]);
    G.wire_to_component("a", "MUL_1");
    G.wire_to_component("c", "MUL_1");
    G.wire_from_component("f", "MUL_1");

    // xwire = f - d
    G.add_component("SUB_1", latencies["SUB"][16]);
    G.wire_to_component("f", "SUB_1");
    G.wire_to_component("d", "SUB_1");
    G.wire_from_component("xwire", "SUB_1");

    // x = xwire
    G.add_component("REG_2", latencies["REG"][16]);
    G.wire_to_component("xwire", "REG_2");
    G.wire_from_component("x", "REG_2");
    G.make_register("REG_2");

    while (G.num_incomplete > 0)
        for (auto comp_itr : G.components)
            G.propagate(comp_itr.first);
    cout << G.max_latency << "\n";
    return 0;
}